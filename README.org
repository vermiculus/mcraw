* About McRaw (mik-raw)
[[https://travis-ci.org/vermiculus/mcraw.png]]

McRaw provides an extensible way to calculate the raw material
requirements of any item you define.  McRaw is designed to be an
all-in-one command-line-interface (CLI) solution for understanding how
much raw material you would invest for a particular item (and how to
craft things as cheaply as possible).

* Using McRaw -- Tutorial
** Setting Up
There is a fair amount of setup involved in McRaw.  Since there is no
good way to extract item recipes from the Minecraft binaries
themselves, a database of these recipes must be separately maintained.

I hope to have a collection of pre-made databases provided in this
repository at some point, but obviously the tool to create them must
first exist.

*** Installing
Installing McRaw is a piece of cake.
#+BEGIN_SRC sh
  python mcraw.py setup install
#+END_SRC

This does several things:
1. Makes McRaw an executable (so that it can be run as =mcraw args=)
2. Makes an environment variable ~MCRAWDIR~ that points to 

*** Creating a Database
McRaw uses a CLI interface to create and maintain databases of item
recipes.  Creating a database called ~custom~ will work like this:
#+BEGIN_SRC sh
  mcraw setup createdb custom --file "/path/to/custom.mcraw" 
#+END_SRC
No spaces in database names.  With the =--file= option, you specify
where you want the database to be saved.  If this is not provided,
McRaw creates a file called ~custom.mcraw~ in your HOME directory
(does this exist by default on Windows systems?  (Answer: no)) and is
simply a saved state of an internal list of recipes.

*** Adding Items
You can add items to a database by
#+BEGIN_SRC sh
  mcraw item add ITEM_ID "NAME"
#+END_SRC
which opens ~custom.mcraw~, adds the item ~ITEM_ID~ to it with the
name ~NAME~, saves it, and exits.  It is an error to add an existing
recipe.

*** Renaming Items
If you wish to rename an item,
#+BEGIN_SRC sh
  mcraw item rename ITEM_ID "NEW NAME"
#+END_SRC
which renames the item in the database file.

*** Adding Recipes
#+BEGIN_SRC sh
  mcraw recipe add NEWITEM_COUNT NEWITEM_ID ITEM1_COUNT ITEM1_ID ...
#+END_SRC
Appends the given recipe for ~ITEM_ID~ to the database and saves it.

The optional argument =--needs= signals the start of needed, static
utilities to complete the /immediate/ task; that is, the following
recipe would be valid:
#+BEGIN_SRC sh
  mcraw recipe add 8 CHARCOAL 8 WOOD 1 CHARCOAL --needs FURNACE
#+END_SRC
When this recipe is used in an item resolution, it will be noted that
a ~FURNACE~ is needed.  Note that if additional recipes in the chain
also need a FURNACE, the resolution will only note the need of a
single ~FURNACE~.

Even though most recipes require a crafting table, this cannot be made
a default as McRaw doesn't actually know anything about Minecraft.
So, most recipes will specify this option.

** Breaking Down
Now comes the fun part.

The following all assumes you've set your default database for use
with McRaw.  You can do this one of two ways:

1. Tell McRaw you'd like to use a specific database by default.
   #+BEGIN_SRC sh
     mcraw setup database custom
   #+END_SRC
   which simply performs the next option:
2. Edit =$MCRAWDIR/mcraw.conf= to include the following lines:
   #+BEGIN_SRC conf
     [mcraw]
     ...
     database=custom
   #+END_SRC

*** Getting Potential Costs
Many times, especially with modpacks, there is more than one way to
create an item.  This leads to an exponential growth in exactly how
many ways an item can be crafted, depending on how complex the item
and its dependencies are.  Thus, if there is more than one way to skin
the cat, the following commands will simply output a sorted list of
all possible ways to craft the item.

#+BEGIN_SRC sh
  mcraw reduce 12345:1
#+END_SRC
produces such a list:
#+BEGIN_EXAMPLE
  There are multiple ways to craft this.  Here's a list:
  
  1: (6 items total)
  4 Iron Ore
  2 Gold Ore
  
  2: 7 items total; needs Macerator (1234)
  2 Iron Ore
  1 Gold Ore
#+END_EXAMPLE

Since McRaw needs to be completely unambiguous and items in Minecraft
are often /very/ ambiguous, there is modest database search
functionality embedded within McRaw.

#+BEGIN_SRC sh
  mcraw info wood
#+END_SRC
#+BEGIN_EXAMPLE
  123:1 Spruce Wood
  123:2 Oak Wood
  123:3 Birch Wood
#+END_EXAMPLE

If the argument produces a single result:
#+BEGIN_SRC sh
  mcraw info "spruce wood"
#+END_SRC
#+BEGIN_EXAMPLE
  Spruce Wood
    ITEM_ID   123:1
    There are no recipes that craft Spruce Wood.
    Spruce Wood is used in 43 recipes.
    You don't need anything to get Spruce Wood.
#+END_EXAMPLE
which provides:
1. The item id -- used throughout the rest of McRaw
2. Recipes that craft this item
3. Recipes that this item crafts
4. /Any/ utility dependencies -- this includes those in the recipes to
   create it.

*** Getting Crafty
Okay, so McRaw can give you a list of everything you need to lay your
hands on to craft your favorite item.

* Problems?
McRaw comes with one final feature: self-validation.  This is also
used in automatic build testing, so release builds are guaranteed to
pass on all supported platforms.  If it does not pass, re-download and
double-check your checksums.

#+BEGIN_SRC sh
  mcraw setup validate
#+END_SRC
* Manual =mcraw=
** Command Tree =mcraw=
McRaw is organized into several subtasks.  If an invalid command is
used at any time, a short usage summary will be printed to the
standard output stream.

*** Setup Tasks =setup=
Performs uncommon menial setup tasks.
**** Install McRaw =install=
- Ask for value for environment variable =MCRAWDIR=
- Create directory =$MCRAWDIR=
- Create file =$MCRAWDIR/mcraw.conf=
- Move self into =$MCRAWDIR= and add to =PATH=.
- If an Internet connection is available, offer to install databases
  (from GitHub) into =$MCRAWDIR=

**** Create Databases =createdb NAME=
Takes one argument -- the name of a new database.  The database is
added to the McRaw configuration file.

- =--file= :: takes one argument as a relative or absolute path to the
              file.  If this file already exists, the file is not
              overwritten but first validated and then added to McRaw.

**** Set Default Database =database NAME=
Takes one argument and sets the default database.  This database must
exist in McRaw's configuration file.

**** Validate Installation =validate=
Takes no arguments.  Automated installation validation.

*** Searching Databases =info ID=
Takes exactly one argument.  Quotes are not implied, but will group
words into one argument.  If search result is unambiguous, =info= will
output all the information available in the database.  Otherwise, a
list of matching item names and IDs is output.

*** Reducing Items =reduce ID=
Reduces an item.  This is the main function of McRaw.  output all
possible raw material and utility requirements.  First performs a
search similar to =info=; if the result is unambiguous,

Otherwise, output a list (just as =info= would) of possible disambiguations.

*** Item Alterations =item=
Functions related to modifying items.

- =--database= :: specify database to edit

**** Add to Database =add ID=
First performs a search similar to =info=; if the result is
unambiguous, adds the single argument as an item ID to the database.  
Otherwise, output a list (just as =info= would) of possible
disambiguations.

It is an error to re-add an existing item ID.

- =--database= :: specify database to edit
- =--name= :: specifies a name for the item.  This is not the record
              key, so it need not be unique.

**** Rename in Database =rename ID NAME=
First performs a search similar to =info=; if the result is
unambiguous, rename the specified item ID with the name given.
Otherwise, output a list (just as =info= would) of possible
disambiguations.

It is an error to rename a non-existent item ID.

- =--database= :: specify database to edit

**** Delete from Database =delete ID=
First performs a search similar to =info=; if the result is unambiguous,
delete the specified item ID.
Otherwise, output a list (just as =info= would) of possible disambiguations.

It is an error to delete a non-existent item ID.

- =--database= :: specify database to edit

*** Recipe Alterations =recipe=
Functions related to modifying recipes.

- =--database= :: specify database to edit

**** Add Recipe to Database =add CT ID CT-1 ID-1 CT-2 ID-2 ..=
First performs a search similar to =info=; if the result is
unambiguous, add the recipe for ~ID~ (with mandatory count ~CT~;
e.g. 4 Sticks needs 1 Wood) with the following ~CT~ -- ~ID~ pairs
declaring the recipe requirements.  Otherwise, output a list (just as
=info= would) of possible disambiguations.

- =--needs= :: takes one argument, an item ID, that is required for
               this crafting step

**** Delete Recipe from Database =delete=
First performs a search similar to =info=; if the result is
unambiguous, output a list of recipes for the item ID.  Otherwise,
output a list (just as =info= would) of possible disambiguations.

Per the menu, this command cannot be run without interaction.

*** Getting Help with =help=
Taking exactly one argument, this command prints any documentation
available for the command.

** Persistent Data
Of course, McRaw works with /real files/ and needs some place to store
them.  Upon installation (see [[*Install%20McRaw%20%3Dinstall%3D][*Install McRaw]]), the configuration file,
=mcraw.conf=, is added.  After installation, many individual databases
might be created either within the McRaw directory or outside of it;
all of this information is stored in the configuration file.

*** Configuration File =$MCRAWDIR/mcraw.conf=
Stores database file paths and references and database concatenations.
An example file is below.

#+BEGIN_SRC conf
  [mcraw]
  last_update=20130601
  
  [databases]
  
  mydbA=./dbA.mcraw
  mydbB=../orphaned.mcraw
  mydbC=simple.mcraw
  
  qualified=/Users/Teapot/grubby.mcraw
  
  [composites]
  tekkit=galacticraft,someplugin
  other=mydbA,mydbC
  weird=tekkit,mydbB
#+END_SRC
**** Section =mcraw=
Holds information directly related to McRaw as a program.

- =lastupdate= :: The last date that McRaw checked for an update.  If
                  this date is over two weeks ago and an Internet
                  connection is available, McRaw will ask to update
                  itself.  Whether or not the user accepts, this date
                  is updated.
**** Section =databases=
holds keys to database files.  Every database must be registered in
this configuration file before it can be used with McRaw.

If database location is a relative path, it is checked relative to
=$MCRAWDIR=.  Fully qualified names act as expected.

- /=NAME=/ :: the file associated with the database that is referred
              to by ~NAME~ from the McRaw interface.

**** Section =composites=
Most Minecraft plugins add items; we all now this.  I for one do not
install just one plugin though, and will often remove plugins from the
fray.  It's nice to be able to define 'composite' databases ---
databases comprised of multiple other databases.

Component databases must be declared before they can be used.  This is
partly to avoid recursion.  While item IDs can be duplicated across
multiple databases, note that McRaw will check the databases /in the
order they are specified/.  Consider the composite:
#+BEGIN_SRC conf
  composite=component1,component2
#+END_SRC
If both ~component1~ and ~component2~ declare the item ID ~Spruce
Wood~, ~component1~ definitions take precedence over ~component2~.  As
such, it's not a good idea to have reduplicated item IDs, and it's
best to simply use /the/ item ID used in Minecraft to avoid clashes.

- /=NAME=/ :: a list of databases that comprise the composite database
              that is referred to by ~NAME~ from the McRaw interface.

* Credits
** Source
- Sean Allred
** Databases
(Once the source code has matured, ready-to-use databases should be
added here so that end users can, well, /use/ them without having to
first set them up.  I'd like the yet-to-be-created folder =databases/=
to contain a list of modpacks, presumably ones that actually add
items, further organized by version.  The software will provide a
means of creating a union of modpacks

* Wishlist
- Ability to define /classes/ of items so that recipes (and the
  interface) can be made more robust.  For example, to get 4 Sticks,
  you only need to have two blocks of wood plank; /it doesn't matter
  what type of wood you use, so long as it's wood/.
- Ability to define recipe shapes (and signal shapeless recipes)
